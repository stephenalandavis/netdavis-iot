---

- name: "Ensure {{ account.localuser.username }} Group Exists"
  ansible.builtin.group:
    name: "{{ account.localuser.username }}"
    gid: "{{ account.localuser.uid_and_gid_number }}"
    state: present
  become: yes

- name: "Create User {{ account.localuser.username }} with Default Groups"
  ansible.builtin.user:
    name: "{{ account.localuser.username }}"
    password: "{{ account.localuser.password | password_hash('sha512') }}"
    comment: "{{ account.localuser.description }}"
    uid: "{{ account.localuser.uid_and_gid_number }}"
    group: "{{ account.localuser.username }}"
    # TODO: these groups need to be reviewed for security (i.e. there are vulnerabilities with the input group).
    groups: "adm,dialout,cdrom,plugdev,users,input,netdev,gpio,i2c,spi"
    append: yes
    create_home: yes
    shell: /bin/bash
    state: present
  become: yes

- name: "Authorize {{ account.localuser.username }} for NOPASSWD sudo Usage"
  ansible.builtin.copy:
    dest: "/etc/sudoers.d/{{ account.localuser.username }}"
    content: |
      # Allow the `user` account sudo access without requiring a password.
      {{ account.localuser.username }} ALL=(ALL) NOPASSWD:ALL
    owner: root
    group: root
    mode: u=w,g=r,o=
    validate: '/usr/sbin/visudo --check --file=%s'
  become: yes

- name: "Add {{ account.localuser.username }} to sudo Group"
  # This seems redundant with the above sudoers.d entry, but is needed by polkit.
  ansible.builtin.user:
    name: "{{ account.localuser.username }}"
    groups: sudo
    append: yes
  become: yes

# Slightly future proofing this (shrug).
- name: Check if Raspberry Pi-Based OS
  ansible.builtin.stat:
    path: /boot/config.txt
  register: rpi

- ansible.builtin.import_tasks: remove_pi_user.yml
  when: rpi.stat.exists

- name: Lock the root account
  ansible.builtin.user:
    name: root
    password_lock: yes
